<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.LoginInfoMapper">
	<resultMap id="BaseResultMap" type="com.snail.fitment.model.userinfo.LoginInfo">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="BIGINT" />
		<result column="checked" property="checked" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="status" property="status" jdbcType="INTEGER" />
	</resultMap>
	
	<sql id="Base_Column_List">
		id, login_name, password,  email, mobile, user_id, checked, create_time, update_time, status
	</sql>
	
	<select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from login_info_t where id = #{id}
	</select>
	
	<select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from login_info_t where user_id = #{userId}
	</select>
	

	<select id="selectByEmail"  parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from login_info_t 
		where status = 0 and email = #{email, jdbcType=VARCHAR}
	</select>	
	
	<select id="selectByLoginName"  parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from login_info_t 
		where status = 0 and login_name = #{loginName, jdbcType=VARCHAR}
	</select>	

	<select id="selectByMobile"  parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from login_info_t 
		where status = 0 and mobile = #{mobile, jdbcType=VARCHAR}
	</select>	
	
		
	<select id="selectByLoginNameAndEmailAndMobile"  parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from login_info_t 
		where status = 0
		
		<if test="loginName != null" >
        	and login_name = #{loginName, jdbcType=VARCHAR}
        </if>
      
        <if test="email != null" >
        	and email = #{email,jdbcType=VARCHAR}
        </if>
      
        <if test="mobile != null" >
        	and mobile = #{mobile,jdbcType=VARCHAR}
      	</if>
      	
	</select>	
	

	<select id="selectByKeywords" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from login_info_t where status = 0
		and (login_name = #{keywords} or email = #{keywords} or mobile = #{keywords})
	</select>
	
	<delete id="deleteById" parameterType="java.lang.Long">
		delete from login_info_t
		where id = #{id}
	</delete>

	<delete id="deleteByIdList" parameterType="hashmap">
		delete from login_info_t
		where id in 
	    <foreach item="item" index="index" collection="idList"
						open="(" separator="," close=")">
						#{item} 
		</foreach>
	</delete> 
	
	<insert id="insert" parameterType="com.snail.fitment.model.userinfo.LoginInfo" keyProperty="id" useGeneratedKeys="true">
		insert into login_info_t (login_name, password, email, mobile, user_id,  checked, create_time, update_time, status)
		values
		( #{loginName},  #{password}, #{email}, #{mobile}, #{userId}, #{checked}, #{createTime}, #{updateTime}, #{status})
	</insert>


	<update id="updateById" parameterType="com.snail.fitment.model.userinfo.LoginInfo">
		update login_info_t
		set
      
      	<if test="loginName != null" >
        	login_name = #{loginName, jdbcType=VARCHAR},
        </if>
        
        <if test="password != null" >
        	password = #{password,jdbcType=VARCHAR},
      	</if>
        
        <if test="email != null" >
        	email = #{email,jdbcType=VARCHAR},
        </if>
      
        <if test="mobile != null" >
        	mobile = #{mobile,jdbcType=VARCHAR},
      	</if>
      	
      	<if test="userId != null" >
        	user_id = #{userId,jdbcType=BIGINT},
      	</if>
      	
      	<if test="checked != null" >
        	checked = #{checked,jdbcType=INTEGER},
      	</if>
      
        <if test="createTime != null" >
        	create_time = #{createTime,jdbcType=TIMESTAMP},
      	</if>
      
        <if test="updateTime != null" >
        	update_time = #{updateTime,jdbcType=TIMESTAMP},
      	</if>
      
      	<if test="status != null" >
        	status = #{status,jdbcType=INTEGER}
      	</if>
      	
		where id = #{id}
	</update>
	
	
	<select id="countByParams"  parameterType="map" resultType="int">
		select count(*)
		
		from login_info_t where 1=1
      	
      	<if test="status != null" >
        	and status = #{status, jdbcType=INTEGER}
      	</if>
      	
      	<if test="keywords != null" >
        	and (login_name like #{keywords} or email like #{keywords} or mobile like #{keywords})
      	</if>
	</select>

	<select id="queryByParamsForPage"  parameterType="map" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		
			from login_info_t where 1=1
      	
      	<if test="status != null" >
        	and status = #{status, jdbcType=INTEGER}
      	</if>
      	
      	<if test="keywords != null" >
        	and (login_name like #{keywords} or email like #{keywords} or mobile like #{keywords})
      	</if>
      	
      	<if test="offset !=null and limit !=null">
      		order by id limit #{offset}, #{limit}
      	</if>
	</select>
</mapper>